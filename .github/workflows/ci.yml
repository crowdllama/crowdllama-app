name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libglib2.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          pkg-config

    - name: Install dependencies
      run: bun install
      
    - name: Run frontend tests
      run: bun test || echo "No frontend tests found or tests failed"
      continue-on-error: true
      
    - name: Run Rust tests
      run: cargo test
      working-directory: src-tauri
      continue-on-error: true

  build-sidecar:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            goos: darwin
            goarch: amd64
            target: x86_64-apple-darwin
          - os: macos-latest
            goos: darwin
            goarch: arm64
            target: aarch64-apple-darwin
          - os: windows-latest
            goos: windows
            goarch: amd64
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Build sidecar
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        cd src-sidecar
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -o crowdllama-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        else
          go build -o crowdllama-${{ matrix.goos }}-${{ matrix.goarch }}
        fi
        echo "Built sidecar for ${{ matrix.goos }}-${{ matrix.goarch }}"
      shell: bash

    - name: Upload sidecar artifact
      uses: actions/upload-artifact@v4
      with:
        name: sidecar-${{ matrix.goos }}-${{ matrix.goarch }}
        path: src-sidecar/crowdllama-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 30

  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            sidecar_artifact: sidecar-linux-amd64
            sidecar_file: crowdllama-linux-amd64
            target: x86_64-unknown-linux-gnu
            artifact_name: crowdllama-app-linux-amd64
            needs_rust_target: false
            needs_system_deps: true
            copy_command: |
              mkdir -p src-tauri/crowdllama
              cp crowdllama-linux-amd64 src-tauri/crowdllama/crowdllama
              chmod +x src-tauri/crowdllama/crowdllama
              ls -la src-tauri/crowdllama/
            build_command: bun run tauri build --target x86_64-unknown-linux-gnu
          - os: macos-latest
            sidecar_artifact: sidecar-darwin-amd64
            sidecar_file: crowdllama-darwin-amd64
            target: x86_64-apple-darwin
            artifact_name: crowdllama-app-macos-intel
            needs_rust_target: true
            needs_system_deps: false
            copy_command: |
              mkdir -p src-tauri/crowdllama
              cp crowdllama-darwin-amd64 src-tauri/crowdllama/crowdllama
              chmod +x src-tauri/crowdllama/crowdllama
              ls -la src-tauri/crowdllama/
            build_command: tauri-apps/tauri-action@v0
            build_args: --target x86_64-apple-darwin
          - os: macos-latest
            sidecar_artifact: sidecar-darwin-arm64
            sidecar_file: crowdllama-darwin-arm64
            target: aarch64-apple-darwin
            artifact_name: crowdllama-app-macos-arm64
            needs_rust_target: false
            needs_system_deps: false
            copy_command: |
              mkdir -p src-tauri/crowdllama
              cp crowdllama-darwin-arm64 src-tauri/crowdllama/crowdllama
              chmod +x src-tauri/crowdllama/crowdllama
              ls -la src-tauri/crowdllama/
            build_command: tauri-apps/tauri-action@v0
            build_args: --target aarch64-apple-darwin
          - os: windows-latest
            sidecar_artifact: sidecar-windows-amd64
            sidecar_file: crowdllama-windows-amd64.exe
            target: x86_64-pc-windows-msvc
            artifact_name: crowdllama-app-windows-amd64
            needs_rust_target: false
            needs_system_deps: false
            copy_command: |
              if (!(Test-Path "src-tauri\crowdllama")) { mkdir src-tauri\crowdllama }
              copy crowdllama-windows-amd64.exe src-tauri\crowdllama\crowdllama
              dir src-tauri\crowdllama\
            build_command: tauri-apps/tauri-action@v0
            build_args: --target x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    needs: [test, build-sidecar]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Download sidecar artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.sidecar_artifact }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Add Rust target for Intel macOS
      if: matrix.needs_rust_target
      run: rustup target add x86_64-apple-darwin

    - name: Install system dependencies
      if: matrix.needs_system_deps
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libglib2.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          pkg-config

    - name: Install dependencies
      run: bun install

    - name: Copy sidecar binary
      run: ${{ matrix.copy_command }}

    - name: Install Tauri CLI
      if: matrix.os == 'ubuntu-latest'
      run: npm install -g @tauri-apps/cli@next

    - name: Build Tauri app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: ${{ matrix.build_command }}

    - name: Build Tauri app (macOS/Windows)
      if: matrix.os != 'ubuntu-latest'
      uses: tauri-apps/tauri-action@v0
      with:
        args: ${{ matrix.build_args }}
        projectPath: .
        distPath: dist
        iconPath: src-tauri/icons/icon.png

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/
        retention-days: 30 